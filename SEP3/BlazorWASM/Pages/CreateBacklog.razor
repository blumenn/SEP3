@page "/CreateBacklog"
@using HttpClients.ClientInterfaces
@using Domain.Models
@using Domain.DTOs
@using UIComponents
@inject IUserService userService
@inject IBackLogService backlobService
@inject NavigationManager navMgr

<div class="card">
    @if (users == null)
    {
        <label>Loading users...</label>
    }
    else if (!users.Any())
    {
        <label>No users, you cannot create a Todo</label>
    }
    else
    {
        <h3>Create Todo</h3>
        <div class="form-group field">
            <label>Title:</label>
            <input type="text" @bind="backlogName"/>
        </div>
        
        <div class="form-group field">
            <label>Assignee:</label>
            <select @bind="selectedId">
                <option>Choose</option>
                @foreach (User user in users)
                {
                <option value="@user.UserId">@user.UserName</option>
                }
            </select>
        </div>
        
        <div class="button-row">
            @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: red">@msg</label>
            }
            <button @onclick="Create" class="acceptbtn">Create</button>
        </div>
    }
</div>

<Modal ShowModal="showModal">
    <p>You have successfully added a new Todo item. You should be very proud of yourself!</p>
    <button @onclick="@Proceed">Wonderful</button>
</Modal>

@code {
    private IEnumerable<User>? users;
    private int selectedId;
    private User? selectedUser;
    private string backlogName = "";
    private string msg = "";

    
    private bool showModal;

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = (ICollection<User>?)await userService.GetUsers();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task Create()
    {
        
        // selectedID som skal findes i en Users-lsite. Dette ID's user skal bruges ifbm. dto'en

        foreach (User user in users)
        {
            if (user.UserId == selectedId)
            {
                selectedUser = user;
            }
        }
        msg = "";
        if (selectedUser == null)
        {
            msg = "You must select an product owner!";
            return;
        }
        if (string.IsNullOrEmpty(backlogName))
        {
            msg = "Title cannot be empty!";
            return;
        }

        try
        {
            BacklogCreationDto dto = new(backlogName, selectedUser);
            await backlobService.CreateAsync(dto);
            showModal = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void Proceed()
    {
        showModal = false;
        navMgr.NavigateTo("/Backlog");
    }

}